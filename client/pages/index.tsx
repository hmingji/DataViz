import { ChevronDown } from '@/components/common/Icons/ChevronDown';
//import LineChart from '@/components/common/LineChart';
import MultiSelectListBox from '@/components/common/MultiSelectListBox';
import SelectionGroup from '@/components/common/SelectionGroup';
import { Attribute, attributes } from '@/constants/attributes';
import { Interval, intervals } from '@/constants/intervals';
import { State, states } from '@/constants/states';
import { useRecordQuery } from '@/hooks/useRecordQuery';
import { ChartOptions } from 'chart.js';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useEffect, useState } from 'react';
const LineChart = dynamic(() => import('@/components/common/LineChart'), {
  ssr: false,
});
//import { Inter } from '@next/font/google';
import DropdownMenu from '../components/common/DropdownMenu';
//const inter = Inter({ subsets: ['latin'] });
export default function Home() {
  const [attribute, setAttribute] = useState<Attribute>(attributes[0]);
  const [interval, setInterval] = useState<Interval>(intervals[2]);
  const [state, setState] = useState<State[]>([states[0]]);
  const [url, setUrl] = useState(
    `Record/${attribute.category}/${interval.pathName}/${attribute.pathName}`
  );

  const results = useRecordQuery(url, state);
  //console.log('url', url);
  //unit of time to be dynamic
  const options: ChartOptions<'line'> = {
    responsive: true,
    scales: {
      x: {
        type: 'time',
        time: {
          unit: 'year',
        },
      },
      y: {
        beginAtZero: true,
      },
    },
    plugins: {
      zoom: {
        zoom: {
          // drag: {
          //   enabled: true,
          // },
          wheel: {
            enabled: true,
          },
          pinch: {
            enabled: true,
          },
          mode: 'x',
        },
        pan: {
          enabled: true,
          mode: 'x',
          modifierKey: 'ctrl',
        },
      },
    },
  };
  useEffect(() => {
    setUrl(
      `Record/${attribute.category}/${interval.pathName}/${attribute.pathName}`
    );
  }, [attribute, interval]);

  function handleDropdownOnClick(item: string) {
    const latestAttribute = attributes.find(
      (attribute) => attribute.displayName == item
    );
    if (latestAttribute) setAttribute(latestAttribute);
  }

  function handleIntervalOnChange(item: number) {
    const latestInterval = intervals.find((interval) => interval.id == item);
    if (latestInterval) setInterval(latestInterval);
  }

  function handleStatesOnChange(items: number[]) {
    const latestStates = states.filter((state) => items.includes(state.id));
    if (latestStates) setState(latestStates);
  }
  //TODO: try api off and see if query state is success
  if (results.every((result) => result.isSuccess == true)) {
    const dataSets = results.map((result) => {
      //aff if to check result.data is exist
      const chartData = result.data?.data.map((datum) => {
        const date = new Date(datum.date);
        const dateInMsWithoutOffset =
          date.getTime() + date.getTimezoneOffset() * 60 * 1000;
        return {
          x: dateInMsWithoutOffset,
          y: datum.value,
        };
      });
      return {
        chartData,
        state: result.data?.metaData.state,
        interval: result.data?.metaData.interval,
      };
    });

    const chartdata = {
      datasets: dataSets.map((dataSet) => {
        return {
          label: dataSet.state || 'Unknown',
          data: dataSet.chartData || [{ x: 0, y: 0 }],
          backgroundColor:
            states.find((state) => state.paramValue === dataSet.state)
              ?.chartBackgroundColor || 'rgba(0,0,0,0.5)',
          borderColor:
            states.find((state) => state.paramValue === dataSet.state)
              ?.chartBorderColor || 'rgb(0,0,0)',
          borderWidth: 1,
        };
      }),
    };

    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta
            name="description"
            content="Generated by create next app"
          />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1"
          />
          <link
            rel="icon"
            href="/favicon.ico"
          />
        </Head>
        <main>
          <h1 className="text-black">Hello World!</h1>

          <div className="w-full flex gap-8 px-2">
            <DropdownMenu
              buttonLabel="Attribute"
              menuItems={attributes
                .filter((attribute) => attribute.category == 'donation')
                .map((attribute) => attribute.displayName)}
              handleOnClick={handleDropdownOnClick}
              buttonIcon={<ChevronDown size="sm" />}
              selectedItem={attribute.displayName}
            />

            <SelectionGroup
              options={intervals.map((interval) => {
                return {
                  id: interval.id,
                  label: interval.displayName,
                };
              })}
              handleOnChange={handleIntervalOnChange}
              value={interval.id}
            />

            <MultiSelectListBox
              buttonLabel="States"
              options={states.map((state) => {
                return {
                  id: state.id,
                  label: state.displayName,
                };
              })}
              handleOnChange={handleStatesOnChange}
              value={state.map((item) => item.id)}
              optionWithIcon={false}
            />
          </div>
          <div className="max-w-fit">
            <LineChart
              chartData={chartdata}
              options={options}
            />
          </div>
        </main>
      </>
    );
  }
}
